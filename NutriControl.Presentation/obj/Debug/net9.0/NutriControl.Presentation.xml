<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NutriControl.Presentation</name>
    </assembly>
    <members>
        <member name="M:Presentation.Controllers.CropController.GetAsync">
            <summary>Obtiene todos los cultivos activos.</summary>
            <remarks>
            GET /api/Crop
            </remarks>
            <response code="200">Devuelve todos los cultivos.</response>
            <response code="404">Si no hay cultivos.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.GetAsync(System.Int32)">
            <summary>Obtiene un cultivo por su ID.</summary>
            <param name="id">ID del cultivo.</param>
            <response code="200">Devuelve el cultivo.</response>
            <response code="404">Si el cultivo no se encuentra.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.GetByFieldIdAsync(System.Int32)">
            <summary>Obtiene los cultivos activos para un campo específico.</summary>
            <param name="fieldId">ID del campo.</param>
            <response code="200">Devuelve los cultivos del campo.</response>
            <response code="404">Si no se encuentra ningún cultivo para el campo.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.PostAsync(Presentation.Request.CreateCropCommand)">
             <summary>
             Crea un nuevo cultivo para un campo específico.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 POST /api/Crop
                 {
                    "fieldName": "Campo1",
                    "cropType": "Trigo",
                    "quantity": 100,
                    "status": "Activo"
                 }
            
             </remarks>
             <param name="command">El cultivo a crear.</param>
             <returns>El ID del cultivo recién creado.</returns>
             <response code="201">Devuelve el ID del cultivo creado.</response>
             <response code="400">Si el cultivo tiene propiedades inválidas.</response>
             <response code="404">Si no se encuentra un campo con el nombre especificado.</response>
             <response code="500">Si ocurre un error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.PutAsync(System.Int32,Presentation.Request.UpdateCropCommand)">
             <summary>
             Actualiza un cultivo existente por su ID.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 PUT /api/Crop/5
                 {
                    "cropType": "Trigo",
                    "quantity": 150,
                    "status": "Cosechado"
                 }
            
             </remarks>
             <param name="id">ID del cultivo a actualizar.</param>
             <param name="command">Datos actualizados del cultivo.</param>
             <response code="200">Cultivo actualizado correctamente.</response>
             <response code="400">Si el cultivo tiene propiedades inválidas.</response>
             <response code="404">Si el cultivo no se encuentra.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.DeleteAsync(System.Int32)">
            <summary>
            Elimina un cultivo por su ID.
            </summary>
            <param name="id">ID del cultivo a eliminar.</param>
            <response code="200">Cultivo eliminado correctamente.</response>
            <response code="404">Si el cultivo no se encuentra.</response>
            <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.GetRecommendationByIdAsync(System.Int32)">
            <summary>Obtiene una recomendación por su ID.</summary>
            <param name="id">ID de la recomendación.</param>
            <response code="200">Devuelve la recomendación.</response>
            <response code="404">Si la recomendación no se encuentra.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.GetRecommendationsByCropIdAsync(System.Int32)">
            <summary>Obtiene las recomendaciones activas para un cultivo específico.</summary>
            <param name="cropId">ID del cultivo.</param>
            <response code="200">Devuelve las recomendaciones del cultivo.</response>
            <response code="404">Si no se encuentra ninguna recomendación para el cultivo.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.CreateRecommendationAsync(System.Int32,Presentation.Request.CreateRecommendationCommand)">
             <summary>
             Crea una nueva recomendación para un cultivo específico.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 POST /api/Crop/5/recommendation
                 {
                    "content": "Aplicar fertilizante",
                    "type": "General",
                    "priority": 2,
                    "generatedDate": "2024-06-01T00:00:00"
                 }
            
             </remarks>
             <param name="cropId">ID del cultivo asociado.</param>
             <param name="command">Datos de la recomendación a crear.</param>
             <returns>ID de la recomendación recién creada.</returns>
             <response code="201">Devuelve el ID de la recomendación creada.</response>
             <response code="400">Si la recomendación tiene propiedades inválidas.</response>
             <response code="404">Si no se encuentra el cultivo especificado.</response>
             <response code="500">Si ocurre un error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.UpdateRecommendationAsync(System.Int32,Presentation.Request.UpdateRecommendationCommand)">
             <summary>
             Actualiza una recomendación existente por su ID.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 {
                    "content": "Nueva recomendación",
                    "type": "General",
                    "priority": 3
                 }
            
             </remarks>
             <param name="id">ID de la recomendación a actualizar.</param>
             <param name="command">Datos actualizados de la recomendación.</param>
             <response code="200">Recomendación actualizada correctamente.</response>
             <response code="400">Si la recomendación tiene propiedades inválidas.</response>
             <response code="404">Si la recomendación no se encuentra.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.CropController.DeleteRecommendationAsync(System.Int32)">
            <summary>
            Elimina una recomendación por su ID.
            </summary>
            <param name="id">ID de la recomendación a eliminar.</param>
            <response code="200">Recomendación eliminada correctamente.</response>
            <response code="404">Si la recomendación no se encuentra.</response>
            <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.GetAsync">
            <summary>Obtiene todos los campos activos.</summary>
            <remarks>
            GET /api/Field
            </remarks>
            <response code="200">Devuelve todos los campos.</response>
            <response code="404">Si no hay campos.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.GetAsync(System.Int32)">
            <summary>Obtiene un campo por su ID.</summary>
            <param name="id">ID del campo.</param>
            <response code="200">Devuelve el campo.</response>
            <response code="404">Si el campo no se encuentra.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.GetFieldByNameAsync(System.String)">
            <summary>Obtiene un campo por su nombre.</summary>
            <param name="name">Nombre del campo.</param>
            <response code="200">Devuelve el campo.</response>
            <response code="404">Si el campo no se encuentra.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.GetByUserIdAsync(System.Int32)">
            <summary>Obtiene los campos de un usuario específico.</summary>
            <param name="userId">ID del usuario.</param>
            <response code="200">Devuelve los campos del usuario.</response>
            <response code="404">Si no se encuentra ningún campo para el usuario.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.PostAsync(Presentation.Request.CreateFieldCommand)">
             <summary>
             Crea un nuevo campo para el usuario autenticado.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 POST /api/Field
                 {
                    "name": "Campo 1",
                    "location": "Ubicación 1",
                    "soilType": "Arenoso",
                    "elevation": 500
                 }
            
             </remarks>
             <param name="command">Datos del campo a crear.</param>
             <returns>ID del campo recién creado.</returns>
             <response code="201">Devuelve el ID del campo creado.</response>
             <response code="400">Si el campo tiene propiedades inválidas.</response>
             <response code="409">Si ya existe un campo con el mismo nombre.</response>
             <response code="500">Si ocurre un error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.PutAsync(System.Int32,Presentation.Request.UpdateFieldCommand)">
             <summary>
             Actualiza un campo existente por su ID.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 PUT /api/Field/5
                 {
                    "name": "Campo Actualizado",
                    "location": "Nueva Ubicación",
                    "soilType": "Arcilloso",
                    "elevation": 600
                 }
            
             </remarks>
             <param name="id">ID del campo a actualizar.</param>
             <param name="command">Datos actualizados del campo.</param>
             <response code="200">Campo actualizado correctamente.</response>
             <response code="400">Si el campo tiene propiedades inválidas.</response>
             <response code="404">Si el campo no se encuentra.</response>
             <response code="500">Si ocurre un error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.FieldController.DeleteAsync(System.Int32)">
            <summary>
            Elimina un campo por su ID.
            </summary>
            <param name="id">ID del campo a eliminar.</param>
            <response code="200">Campo eliminado correctamente.</response>
            <response code="404">Si el campo no se encuentra.</response>
            <response code="500">Si ocurre un error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.GetAsync">
            <summary>Obtiene todas las suscripciones activas.</summary>
            <remarks>
            GET /api/Subscription
            </remarks>
            <response code="200">Devuelve todas las suscripciones.</response>
            <response code="404">Si no hay suscripciones.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.GetAsync(System.Int32)">
            <summary>Obtiene una suscripción por su ID.</summary>
            <param name="id">ID de la suscripción.</param>
            <response code="200">Devuelve la suscripción.</response>
            <response code="404">Si la suscripción no se encuentra.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.GetByUserIdAsync(System.Int32)">
            <summary>Obtiene la suscripción activa de un usuario específico.</summary>
            <param name="userId">ID del usuario.</param>
            <response code="200">Devuelve la suscripción del usuario.</response>
            <response code="404">Si no se encuentra una suscripción para el usuario.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.PostAsync(Presentation.Request.CreateSubscriptionCommand)">
             <summary>
             Crea una nueva suscripción para el usuario autenticado.
             </summary>
             <remarks>
             Valores para `planType`:
             - 0: Básico
             - 1: Estándar
             - 2: Premium
            
             Ejemplo de solicitud:
            
                 POST /api/Subscription
                 {
                    "planType": "Básico",
                    "startDate": "2024-06-01T00:00:00",
                    "endDate": "2024-12-01T00:00:00"
                 }
             </remarks>
             <param name="command">Datos de la suscripción a crear.</param>
             <returns>ID de la suscripción recién creada.</returns>
             <response code="201">Devuelve el ID de la suscripción creada.</response>
             <response code="400">Si la suscripción tiene propiedades inválidas.</response>
             <response code="409">Error al validar los datos.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.PutAsync(System.Int32,Presentation.Request.UpdateSubscriptionCommand)">
             <summary>
             Actualiza una suscripción existente por su ID.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 PUT /api/Subscription/5
                 {
                    "planType": "Estándar",
                    "startDate": "2024-07-01T00:00:00",
                    "endDate": "2024-12-31T00:00:00"
                 }
             </remarks>
             <param name="id">ID de la suscripción a actualizar.</param>
             <param name="command">Datos actualizados de la suscripción.</param>
             <response code="200">Suscripción actualizada correctamente.</response>
             <response code="400">Si la suscripción tiene propiedades inválidas.</response>
             <response code="404">Si la suscripción no se encuentra.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:Presentation.Controllers.SubscriptionController.DeleteAsync(System.Int32)">
            <summary>
            Elimina una suscripción por su ID.
            </summary>
            <param name="id">ID de la suscripción a eliminar.</param>
            <response code="200">Suscripción eliminada correctamente.</response>
            <response code="404">Si la suscripción no se encuentra.</response>
            <response code="500">Error inesperado.</response>
        </member>
        <member name="M:NutriControl.Presentation.IAM.Controllers.UserController.GetAsync">
            <summary>Obtiene todos los usuarios activos.</summary>
            <remarks>
            GET /api/v1/User/getall
            </remarks>
            <response code="200">Devuelve todos los usuarios.</response>
            <response code="404">Si no hay usuarios.</response>
            <response code="500">Si ocurre un error interno del servidor.</response>
        </member>
        <member name="M:NutriControl.Presentation.IAM.Controllers.UserController.RegisterAsync(NutriControl.Domain.IAM.Models.Comands.SingupCommand)">
             <summary>
             Registra un nuevo usuario.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 POST /api/v1/User/register
                 {
                     "username": "Jorge Ruiz",
                     "dni": "28089824",
                     "ruc": "35355800618",
                     "emailAddress": "user@example.com",
                     "phone": "809324921",
                     "role": "Farmer - Admin",
                     "password": "Securepassword123!",
                     "confirmPassword": "Securepassword123!"
                 }
            
             </remarks>
             <param name="command">Datos del usuario a crear.</param>
             <returns>ID del usuario recién creado.</returns>
             <response code="201">Devuelve el ID del usuario creado.</response>
             <response code="400">Si el usuario tiene propiedades inválidas.</response>
             <response code="409">Error validando los datos.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:NutriControl.Presentation.IAM.Controllers.UserController.LoginAsync(NutriControl.Domain.IAM.Models.Comands.SigninCommand)">
             <summary>
             Inicia sesión de usuario.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 POST /api/v1/User/login
                 {
                     "username": "Jorge Ruiz",
                     "password": "Securepassword123!"
                 }
            
             </remarks>
             <param name="command">Credenciales del usuario.</param>
             <returns>Token JWT generado.</returns>
             <response code="201">Devuelve el token JWT.</response>
             <response code="400">Si las credenciales son inválidas.</response>
             <response code="409">Error validando los datos.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:NutriControl.Presentation.IAM.Controllers.UserController.PutAsync(System.Int32,NutriControl.Domain.IAM.Models.Comands.UpdateUserCommand)">
             <summary>
             Actualiza un usuario existente por su ID.
             </summary>
             <remarks>
             Ejemplo de solicitud:
            
                 PUT /api/v1/User/5
                 {
                     "username": "Usuario Actualizado",
                     "DniOrRuc": "12345678",
                     "emailAddress": "nuevoemail@example.com",
                     "phone": "809123456"
                 }
            
             </remarks>
             <param name="id">ID del usuario a actualizar.</param>
             <param name="command">Datos actualizados del usuario.</param>
             <response code="200">Usuario actualizado correctamente.</response>
             <response code="400">Si el usuario tiene propiedades inválidas.</response>
             <response code="404">Si el usuario no se encuentra.</response>
             <response code="500">Error inesperado.</response>
        </member>
        <member name="M:NutriControl.Presentation.IAM.Controllers.UserController.DeleteAsync(System.Int32)">
            <summary>
            Elimina un usuario por su ID.
            </summary>
            <remarks>
            DELETE /api/v1/User/{id}
            </remarks>
            <param name="id">ID del usuario a eliminar.</param>
            <response code="200">Usuario eliminado correctamente.</response>
            <response code="404">Si el usuario no se encuentra.</response>
            <response code="500">Error inesperado.</response>
        </member>
    </members>
</doc>
